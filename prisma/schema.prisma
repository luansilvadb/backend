// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Modelo de Tenant (Empresa)
model Tenant {
  id        String   @id @default(uuid())
  name      String
  slug      String   @unique
  email     String   @unique
  phone     String?
  address   String?
  cnpj      String?  @unique
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relacionamentos
  users             User[]
  categories        Category[]
  products          Product[]
  customers         Customer[]
  sales             Sale[]
  inventory         Inventory[]
  suppliers         Supplier[]
  auditLogs         AuditLog[]
  inventoryMovements InventoryMovement[]
  stockAlerts       StockAlert[]
  storeSettings     StoreSettings?

  @@map("tenants")
}

// Modelo de Usuário
model User {
  id        String   @id @default(uuid())
  email     String
  name      String
  password  String
  role      UserRole @default(CASHIER)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relacionamento com Tenant
  tenantId String
  tenant   Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  // Relacionamentos
  sales             Sale[]
  sessions          UserSession[]
  auditLogs         AuditLog[]
  inventoryMovements InventoryMovement[]

  @@unique([email, tenantId])
  @@map("users")
}

// Modelo de Sessão de Usuário
model UserSession {
  id        String    @id @default(uuid())
  userId    String
  isActive  Boolean   @default(true)
  userAgent String?
  ipAddress String?
  expiresAt DateTime
  revokedAt DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  // Relacionamento com Usuário
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_sessions")
}

// Modelo de Log de Auditoria
model AuditLog {
  id         String      @id @default(uuid())
  userId     String
  tenantId   String
  action     AuditAction
  resource   String
  resourceId String?
  method     String?     // HTTP method (GET, POST, PUT, DELETE)
  endpoint   String?     // API endpoint
  ipAddress  String?
  userAgent  String?
  success    Boolean     @default(true)
  errorCode  String?
  details    Json?
  createdAt  DateTime    @default(now())

  // Relacionamentos
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  tenant Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
  @@index([tenantId, createdAt])
  @@index([action, createdAt])
  @@map("audit_logs")
}

// Enum para ações de auditoria
enum AuditAction {
  LOGIN
  LOGOUT
  LOGIN_FAILED
  ACCESS_DENIED
  RESOURCE_CREATED
  RESOURCE_UPDATED
  RESOURCE_DELETED
  RESOURCE_VIEWED
  PERMISSION_GRANTED
  PERMISSION_DENIED
  SESSION_CREATED
  SESSION_REVOKED
  PASSWORD_CHANGED
  PROFILE_UPDATED
  SYSTEM_CONFIG_CHANGED
  BACKUP_CREATED
  REPORT_GENERATED
  BULK_OPERATION
  DATA_EXPORT
  DATA_IMPORT
  INVENTORY_MOVEMENT
  STOCK_ALERT_GENERATED
}

// Modelo de Categoria - Agora com suporte hierárquico
model Category {
  id          String   @id @default(uuid())
  name        String
  description String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relacionamento com Tenant
  tenantId String
  tenant   Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  // Hierarquia de categorias
  parentId String?
  parent   Category? @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children Category[] @relation("CategoryHierarchy")

  // Relacionamentos
  products Product[]

  @@unique([name, tenantId, parentId])
  @@map("categories")
}

// Modelo de Produto - Atualizado com SKU e unidade de medida
model Product {
  id          String      @id @default(uuid())
  name        String
  description String?
  sku         String      // SKU único por tenant
  barcode     String?
  price       Decimal     @db.Decimal(10, 2)
  cost        Decimal     @db.Decimal(10, 2)
  unit        ProductUnit @default(UNIT) // Unidade de medida
  isActive    Boolean     @default(true)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  // Relacionamento com Tenant
  tenantId String
  tenant   Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  // Relacionamento com Categoria
  categoryId String
  category   Category @relation(fields: [categoryId], references: [id])

  // Relacionamentos
  inventory         Inventory[]
  saleItems         SaleItem[]
  inventoryMovements InventoryMovement[]
  stockAlerts       StockAlert[]

  @@unique([sku, tenantId])
  @@unique([barcode, tenantId])
  @@index([name])
  @@map("products")
}

// Enum para unidades de medida
enum ProductUnit {
  UNIT        // Unidade
  KG          // Quilograma
  G           // Grama
  L           // Litro
  ML          // Mililitro
  M           // Metro
  CM          // Centímetro
  M2          // Metro quadrado
  M3          // Metro cúbico
  PACK        // Pacote
  BOX         // Caixa
  DOZEN       // Dúzia
}

// Modelo de Estoque
model Inventory {
  id        String   @id @default(uuid())
  quantity  Int      @default(0)
  minStock  Int      @default(0)
  maxStock  Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relacionamento com Tenant
  tenantId String
  tenant   Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  // Relacionamento com Produto
  productId String @unique
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("inventory")
}

// NOVO: Modelo de Movimentação de Estoque
model InventoryMovement {
  id          String        @id @default(uuid())
  productId   String
  quantity    Int           // Pode ser positivo (entrada) ou negativo (saída)
  type        MovementType
  reason      String?       // Motivo da movimentação
  reference   String?       // Referência externa (ex: número da NF)
  notes       String?       // Observações adicionais
  createdAt   DateTime      @default(now())

  // Relacionamento com Tenant
  tenantId String
  tenant   Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  // Relacionamento com Produto
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  // Relacionamento com Usuário responsável
  userId String
  user   User @relation(fields: [userId], references: [id])

  @@index([productId, createdAt])
  @@index([tenantId, createdAt])
  @@index([type, createdAt])
  @@map("inventory_movements")
}

// Enum para tipos de movimentação de estoque
enum MovementType {
  ENTRADA     // Entrada de mercadoria
  SAIDA       // Saída de mercadoria
  AJUSTE      // Ajuste de estoque
  VENDA       // Saída por venda
  DEVOLUCAO   // Entrada por devolução
  PERDA       // Saída por perda/avaria
  TRANSFERENCIA // Transferência entre locais
}

// NOVO: Modelo de Alertas de Estoque
model StockAlert {
  id          String      @id @default(uuid())
  productId   String
  alertType   AlertType
  message     String      // Mensagem do alerta
  isRead      Boolean     @default(false)
  isResolved  Boolean     @default(false)
  resolvedAt  DateTime?
  createdAt   DateTime    @default(now())

  // Relacionamento com Tenant
  tenantId String
  tenant   Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  // Relacionamento com Produto
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([tenantId, isRead, createdAt])
  @@index([productId, alertType])
  @@map("stock_alerts")
}

// Enum para tipos de alerta de estoque
enum AlertType {
  LOW_STOCK     // Estoque baixo
  OUT_OF_STOCK  // Sem estoque
  OVERSTOCK     // Estoque excessivo
  EXPIRED       // Produto vencido (para futuro)
}

// Modelo de Cliente
model Customer {
  id        String   @id @default(uuid())
  name      String
  email     String?
  phone     String?
  cpf       String?
  cnpj      String?  @unique
  address   String?
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relacionamento com Tenant
  tenantId String
  tenant   Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  // Relacionamentos
  sales Sale[]

  @@unique([email, tenantId])
  @@unique([cpf, tenantId])
  @@index([name])
  @@map("customers")
}

// Modelo de Fornecedor
model Supplier {
  id        String   @id @default(uuid())
  name      String
  email     String?
  phone     String?
  cnpj      String?
  address   String?
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relacionamento com Tenant
  tenantId String
  tenant   Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@unique([email, tenantId])
  @@unique([cnpj, tenantId])
  @@map("suppliers")
}

// Modelo de Venda
model Sale {
  id          String      @id @default(uuid())
  saleNumber  String
  total       Decimal     @db.Decimal(10, 2)
  discount    Decimal     @default(0) @db.Decimal(10, 2)
  tax         Decimal     @default(0) @db.Decimal(10, 2)
  paymentMethod PaymentMethod
  status      SaleStatus  @default(COMPLETED)
  notes       String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  // Relacionamento com Tenant
  tenantId String
  tenant   Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  // Relacionamento com Usuário (Vendedor)
  userId String
  user   User @relation(fields: [userId], references: [id])

  // Relacionamento com Cliente (opcional)
  customerId String?
  customer   Customer? @relation(fields: [customerId], references: [id])

  // Relacionamentos
  items SaleItem[]

  @@unique([saleNumber, tenantId])
  @@index([customerId])
  @@index([userId])
  @@map("sales")
}

// Modelo de Item de Venda
model SaleItem {
  id        String   @id @default(uuid())
  quantity  Int
  unitPrice Decimal  @db.Decimal(10, 2)
  total     Decimal  @db.Decimal(10, 2)
  createdAt DateTime @default(now())

  // Relacionamento com Venda
  saleId String
  sale   Sale @relation(fields: [saleId], references: [id], onDelete: Cascade)

  // Relacionamento com Produto
  productId String
  product   Product @relation(fields: [productId], references: [id])

  @@map("sale_items")
}

// Enums
enum UserRole {
  ADMIN
  MANAGER
  CASHIER
}

enum PaymentMethod {
  CASH
  CREDIT_CARD
  DEBIT_CARD
  PIX
  CHECK
}

enum SaleStatus {
  PENDING
  COMPLETED
  CANCELLED
  REFUNDED
}

// Modelo de Configurações da Loja
model StoreSettings {
  id        String   @id @default(uuid())
  tenantId  String   @unique
  name      String
  address   String?
  cnpj      String?
  logoUrl   String?
  taxes     Json?
  businessRules Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  tenant Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@map("store_settings")
}
